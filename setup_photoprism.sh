#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# --- Color Codes ---
RESET='\033[0m'
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
CYAN='\033[0;36m'

# --- Function Declarations ---

# 1. Check for Docker and Docker Compose
check_deps() {
  echo -e "${CYAN}--- Checking Dependencies ---${RESET}"
  if ! command -v docker &> /dev/null; then
    echo -e "${RED}Error: docker is not installed or not in your PATH.${RESET}"
    echo -e "${YELLOW}Please install Docker before running this script. See your distribution's documentation for instructions.${RESET}"
    exit 1
  fi

  if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}Error: docker-compose is not installed or not in your PATH.${RESET}"
    echo -e "${YELLOW}Please install Docker Compose before running this script. See your distribution's documentation for instructions.${RESET}"
    exit 1
  fi
  echo -e "${GREEN}âœ” Docker and Docker Compose are installed.${RESET}\n"
}

# 2. Get user configuration
get_user_config() {
  echo -e "${CYAN}--- User Configuration ---${RESET}"

  # Read user input with default values
  read -p "$(echo -e ${YELLOW}"Enter the absolute path for your photo library (originals) [~/photoprism/originals]: "${RESET})" PHOTOPRISM_ORIGINALS_PATH
  PHOTOPRISM_ORIGINALS_PATH=${PHOTOPRISM_ORIGINALS_PATH:-~/photoprism/originals}

  read -p "$(echo -e ${YELLOW}"Enter the absolute path for PhotoPrism's storage folder (cache, sidecars) [~/photoprism/storage]: "${RESET})" PHOTOPRISM_STORAGE_PATH
  PHOTOPRISM_STORAGE_PATH=${PHOTOPRISM_STORAGE_PATH:-~/photoprism/storage}

  read -p "$(echo -e ${YELLOW}"Enter the absolute path for the import folder [~/photoprism/import]: "${RESET})" PHOTOPRISM_IMPORT_PATH
  PHOTOPRISM_IMPORT_PATH=${PHOTOPRISM_IMPORT_PATH:-~/photoprism/import}

  # Expand tilde '~' to the user's home directory
  PHOTOPRISM_ORIGINALS_PATH=$(eval echo "$PHOTOPRISM_ORIGINALS_PATH")
  PHOTOPRISM_STORAGE_PATH=$(eval echo "$PHOTOPRISM_STORAGE_PATH")
  PHOTOPRISM_IMPORT_PATH=$(eval echo "$PHOTOPRISM_IMPORT_PATH")

  read -p "$(echo -e ${YELLOW}"Which port should PhotoPrism run on? [2342]: "${RESET})" PHOTOPRISM_HTTP_PORT
  PHOTOPRISM_HTTP_PORT=${PHOTOPRISM_HTTP_PORT:-2342}

  read -p "$(echo -e ${YELLOW}"Enter the admin username for PhotoPrism [admin]: "${RESET})" PHOTOPRISM_ADMIN_USER
  PHOTOPRISM_ADMIN_USER=${PHOTOPRISM_ADMIN_USER:-admin}

  # Securely prompt for password with confirmation loop
  while true; do
    read -s -p "$(echo -e ${YELLOW}"Enter the admin password for PhotoPrism: "${RESET})" PHOTOPRISM_ADMIN_PASSWORD
    echo
    read -s -p "$(echo -e ${YELLOW}"Confirm the admin password: "${RESET})" password_confirm
    echo

    if [[ -z "$PHOTOPRISM_ADMIN_PASSWORD" ]]; then
      echo -e "${RED}Error: Password cannot be empty.${RESET}"
      continue
    fi

    if [[ "$PHOTOPRISM_ADMIN_PASSWORD" == "$password_confirm" ]]; then
      break
    else
      echo -e "${RED}Error: Passwords do not match. Please try again.${RESET}"
    fi
  done

  echo -e "${GREEN}âœ” User configuration saved.${RESET}\n"
}

# 3. Generate docker-compose.yml
generate_compose_file() {
  echo -e "${CYAN}--- Generating Configuration Files ---${RESET}"

  # Create directories if they don't exist
  echo "Creating user-defined directories..."
  mkdir -p "$PHOTOPRISM_ORIGINALS_PATH"
  mkdir -p "$PHOTOPRISM_STORAGE_PATH"
  mkdir -p "$PHOTOPRISM_IMPORT_PATH"
  echo -e "${GREEN}âœ” Host directories are ready.${RESET}"

  # Generate random passwords for MariaDB
  echo "Generating secure database passwords..."
  MARIADB_ROOT_PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
  MARIADB_PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
  echo -e "${GREEN}âœ” Database passwords generated.${RESET}"

  # Create docker-compose.yml using a HEREDOC
  echo "Creating docker-compose.yml file..."
  cat << EOF > docker-compose.yml
# This file was generated by the PhotoPrism setup script.
# Do not edit manually if you plan to re-run the script.

services:
  mariadb:
    image: mariadb:10.11
    restart: always
    volumes:
      # Use a named volume for persistent database storage
      - "photoprism-db:/var/lib/mysql"
    environment:
      MYSQL_ROOT_PASSWORD: "${MARIADB_ROOT_PASSWORD}"
      MYSQL_DATABASE: "photoprism"
      MYSQL_USER: "photoprism"
      MYSQL_PASSWORD: "${MARIADB_PASSWORD}"

  photoprism:
    image: photoprism/photoprism:latest-alpine
    restart: always
    depends_on:
      - mariadb
    ports:
      # Map the user-defined port to the container's web interface
      - "${PHOTOPRISM_HTTP_PORT}:2342"
    volumes:
      # Mount the user-defined host paths to the container
      - "${PHOTOPRISM_ORIGINALS_PATH}:/photoprism/originals"
      - "${PHOTOPRISM_STORAGE_PATH}:/photoprism/storage"
      - "${PHOTOPRISM_IMPORT_PATH}:/photoprism/import"
    environment:
      PHOTOPRISM_ADMIN_USER: "${PHOTOPRISM_ADMIN_USER}"
      PHOTOPRISM_ADMIN_PASSWORD: "${PHOTOPRISM_ADMIN_PASSWORD}"
      PHOTOPRISM_DATABASE_DRIVER: "mysql"
      PHOTOPRISM_DATABASE_SERVER: "mariadb:3306"
      PHOTOPRISM_DATABASE_NAME: "photoprism"
      PHOTOPRISM_DATABASE_USER: "photoprism"
      PHOTOPRISM_DATABASE_PASSWORD: "${MARIADB_PASSWORD}"

volumes:
  photoprism-db:
    # This named volume is managed by Docker to persist the database
EOF
  echo -e "${GREEN}âœ” docker-compose.yml created successfully.${RESET}\n"
}

# 4. Start the services
start_services() {
  echo -e "${CYAN}--- Starting PhotoPrism Services ---${RESET}"

  echo "Pulling the latest Docker images... (This may take a moment)"
  if ! docker-compose pull; then
    echo -e "${RED}Error: Failed to pull Docker images. Please check your internet connection and Docker setup.${RESET}"
    exit 1
  fi

  echo "Starting the containers in detached mode..."
  if ! docker-compose up -d; then
    echo -e "${RED}Error: Failed to start Docker containers. Run 'docker-compose logs' to troubleshoot.${RESET}"
    exit 1
  fi

  echo -e "${GREEN}âœ” Services started successfully.${RESET}\n"
}

# 5. Print the final summary
print_summary() {
  # Attempt to detect a non-loopback IP address for network URL. This is more portable than 'hostname -I'.
  DETECTED_IP=$(ip addr | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' | cut -d'/' -f1 | head -n 1 || echo "localhost")
  if [[ -z "$DETECTED_IP" ]]; then
    DETECTED_IP="localhost"
  fi

  echo -e "${GREEN}=====================================================${RESET}"
  echo -e "${GREEN}ðŸŽ‰ Success! Your PhotoPrism instance is running. ðŸŽ‰${RESET}"
  echo -e "${GREEN}=====================================================${RESET}"
  echo
  echo -e "You can now access your PhotoPrism gallery:"
  echo -e "  ${CYAN}Local URL:   http://localhost:${PHOTOPRISM_HTTP_PORT}${RESET}"
  if [[ "$DETECTED_IP" != "localhost" ]]; then
    echo -e "  ${CYAN}Network URL: http://${DETECTED_IP}:${PHOTOPRISM_HTTP_PORT}${RESET} (for other devices on your network)"
  fi
  echo
  echo -e "Login with these credentials:"
  echo -e "  ${YELLOW}Username: ${PHOTOPRISM_ADMIN_USER}${RESET}"
  echo -e "  ${YELLOW}Password: (The one you entered during setup)${RESET}"
  echo
  echo -e "To start adding your media:"
  echo -e "  - Add files to your originals folder: ${CYAN}${PHOTOPRISM_ORIGINALS_PATH}${RESET}"
  echo -e "  - Or add files to your import folder:  ${CYAN}${PHOTOPRISM_IMPORT_PATH}${RESET}"
  echo -e "  Then, run a scan within the PhotoPrism UI (Library -> Index)."
  echo
  echo -e "To stop the application, run the following command in this directory:"
  echo -e "  ${YELLOW}docker-compose down${RESET}"
  echo
}

# --- Function Declarations ---

# 0. Check for existing installation
check_existing_install() {
  if [ -f "docker-compose.yml" ]; then
    echo -e "${YELLOW}Warning: An existing 'docker-compose.yml' file was found in this directory.${RESET}"
    echo "It appears PhotoPrism is already configured."
    echo "If you wish to re-run the setup, please remove or rename the existing 'docker-compose.yml' file first."
    echo "Exiting now."
    exit 0
  fi
}


# --- Main Execution ---
main() {
  check_existing_install
  check_deps
  get_user_config
  generate_compose_file
  start_services
  print_summary
}

# Run the main function
main "$@"
